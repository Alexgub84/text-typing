{"version":3,"sources":["cmp/TextTyping.jsx","App.js","reportWebVitals.js","index.js"],"names":["TextTyping","text","seconds","useState","currIndex","setCurrIndex","textToDisplay","setTextToDisplay","interval","useRef","nextCount","prevIndex","reStartTimerAndState","clearInterval","current","setInterval","useEffect","length","prevText","charAt","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAEO,SAASA,EAAT,GAAwC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QACjC,EAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACMC,EAAWC,mBAmBjB,SAASC,IACPL,GAAa,SAACM,GAAD,OAAeA,EAAY,KAE1C,SAASC,IACPP,EAAa,GACbE,EAAiB,IACjBM,cAAcL,EAASM,SACvBN,EAASM,QAAUC,YAAYL,EAAWR,GAG5C,OA3BAc,qBAAU,WAER,OADAJ,IACO,WACLC,cAAcL,EAASM,YAExB,IAEHE,qBAAU,WAEJZ,IAAcH,EAAKgB,OAEnBL,IAEAL,GAAiB,SAACW,GAAD,OAAcA,EAAWjB,EAAKkB,OAAOf,QAEzD,CAACA,IAaF,qBAAKgB,UAAU,OAAf,SACGd,IC1BQe,MARf,WACE,OACE,qBAAKD,UAAU,MAAf,SACE,cAACpB,EAAD,CAAYC,KAAM,QAASC,QAAS,SCO3BoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.159d79a9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nexport function TextTyping({ text, seconds }) {\n  const [currIndex, setCurrIndex] = useState(0);\n  const [textToDisplay, setTextToDisplay] = useState(\"\");\n  const interval = useRef();\n\n  useEffect(() => {\n    reStartTimerAndState()\n    return () => {\n      clearInterval(interval.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    \n    if (currIndex === text.length) {\n        \n        reStartTimerAndState()\n    }else{\n        setTextToDisplay((prevText) => prevText + text.charAt(currIndex));\n    }\n  }, [currIndex]);\n\n  function nextCount() {\n    setCurrIndex((prevIndex) => prevIndex + 1)\n  }\n  function reStartTimerAndState(){\n    setCurrIndex(0)\n    setTextToDisplay(\"\")\n    clearInterval(interval.current);\n    interval.current = setInterval(nextCount, seconds);\n  }\n\n  return (\n    <div className=\"text\">\n      {textToDisplay}\n    </div>\n  );\n}\n","import './App.css';\nimport {TextTyping} from './cmp/TextTyping'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TextTyping text={\"Gloat\"} seconds={1000}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}